user www-data;
worker_processes auto;
pid /run/nginx.pid;

include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 768;
    # multi_accept on;
}

http {

    ##
    # Basic Settings
    ##

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    # server_tokens off;

    # server_names_hash_bucket_size 64;
    # server_name_in_redirect off;

    include ./mime.types;
    default_type application/octet-stream;

    ##
    # SSL Settings
    ##

    ssl_session_cache  builtin:1000  shared:SSL:10m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;
    # ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;

    ##
    # Logging Settings
    ##

    access_log ${LOG_DIR}/access.log;
    error_log ${LOG_DIR}/error.log;

    log_format proxy_cache '$remote_addr – $upstream_cache_status $status [$time_local] $request_method $proxy_method://$host$uri $body_bytes_sent "$http_referer" "$http_user_agent" ';

    log_format range_cache '$remote_addr – $upstream_cache_status $status [$time_local] $request_method $forward_range_proxy_scheme://$host$uri "$slice_range" $body_bytes_sent "$http_referer" "$http_user_agent" ';

    ##
    # Gzip Settings
    ##

    gzip on;
    gzip_disable "msie6";

    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 6;
    # gzip_buffers 16 8k;
    # gzip_http_version 1.1;
    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;


    ##
    # Lua Settings
    ##

    lua_shared_dict my_locks 100k;
    lua_package_path "lua/?.lua;../lua-resty-core/lib/?.lua;;";
    init_by_lua '
    ';

    ssl_certificate     ./nginx.crt;
    ssl_certificate_key ./nginx.key;
    ssl_certificate_by_lua_block {
        local ffi = require "ffi"
        local ssl = require "ngx.ssl"
        local resty_lock = require "resty.lock"

        ssl.clear_certs()
        local common_name = ssl.server_name()
        if common_name == nil then
            common_name = "unknown"
        end
        local key_data = nil;
        local f = io.open(string.format("/usr/local/openresty/nginx/conf/ssl/%s-key.der", common_name), "r")
        if f then
            key_data = f:read("*a")
            f:close()
        end
        local cert_data = nil;
        local f = io.open(string.format("/usr/local/openresty/nginx/conf/ssl/%s-cert.der", common_name), "r")
        if f then
            cert_data = f:read("*a")
            f:close()
        end
        if key_data and cert_data then
            local ok, err = ssl.set_der_priv_key(key_data)
            if not ok then
                ngx.log(ngx.ERR, "failed to set DER priv key: ", err)
                return
            end
            local ok, err = ssl.set_der_cert(cert_data)
            if not ok then
                ngx.log(ngx.ERR, "failed to set DER cert: ", err)
                return
            end
            return
        end
        -- prevent creating same certificate twice using lock
        local lock = resty_lock:new("my_locks")
        local elapsed, err = lock:lock(common_name)
        if not elapsed then
                return fail("failed to acquire the lock: ", err)
        end
        -- generate new private key
        ngx.log(ngx.INFO, "generating key")
        -- TODO: REPLACE
        local key_data, err = ssl.rsa_generate_key(2048)
        if not key_data then
            ngx.log(ngx.ERR, "failed to generate rsa key: ", err)
            return
        end
        -- TODO: REPLACE
        local csr, err = ssl.generate_certificate_sign_request(key_data, {
                    country = "NL",
                    state = "Test",
                    city = "City",
                    organisation = "Organisation",
                    common_name = common_name
        })
        if not csr then
            ngx.log(ngx.ERR, "failed to create sign request: ", err)
            return
        end
        ngx.log(ngx.ERR, "generated csr: ", csr, err)
        -- load ca key
        local f = assert(io.open("/usr/local/openresty/nginx/conf/ssl/ca.pem"))
        local ca = f:read("*a")
        f:close()
        if not ca then
            ngx.log(ngx.ERR, "failed to load cakey: ", err)
            return
        end
        -- create certificate using csr req
        -- TODO: REPLACE
        cert_data, err = ssl.sign_csr({
                            ca = ca,
                            csr = csr
        })
        if not cert_data then
            ngx.log(ngx.ERR, "failed to sign: ", err)
            return
        end
        -- write certificate to cache
        local f = assert(io.open(string.format("/usr/local/openresty/nginx/conf/ssl/%s-key.csr", common_name), "w"))
        f:write(key_data)
        f:close()
        local ok, err = ssl.set_der_priv_key(key_data)
        if not ok then
            ngx.log(ngx.ERR, "failed to set DER priv key: ", err)
            return
        end
        local f = assert(io.open(string.format("/usr/local/openresty/nginx/conf/ssl/%s-cert.der", common_name), "w"))
        f:write(cert_data)
        f:close()
        local ok, err = ssl.set_der_cert(cert_data)
        if not ok then
            ngx.log(ngx.ERR, "failed to set DER cert: ", err)
            return
        end
        local ok, err = lock:unlock()
        if not ok then
            return fail("failed to unlock: ", err)
        end
    }

    lua_need_request_body on;

    ##
    # Server Configuration
    ##

    include ./nginx.conf.server;
}
