user www-data;
worker_processes auto;
pid /run/nginx.pid;

include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 768;
    # multi_accept on;
}

http {

    ##
    # Basic Settings
    ##

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    # server_tokens off;

    # server_names_hash_bucket_size 64;
    # server_name_in_redirect off;

    include ./mime.types;
    default_type application/octet-stream;

    ##
    # SSL Settings
    ##

    ssl_session_cache  builtin:1000  shared:SSL:10m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;
    # ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;

    ##
    # Logging Settings
    ##

    access_log ${LOG_DIR}/access.log;
    error_log ${LOG_DIR}/error.log;

    log_format proxy_cache '$remote_addr – $upstream_cache_status $status [$time_local] $request_method $proxy_method://$host$uri $body_bytes_sent "$http_referer" "$http_user_agent" ';

    log_format range_cache '$remote_addr – $upstream_cache_status $status [$time_local] $request_method $forward_range_proxy_scheme://$host$uri "$slice_range" $body_bytes_sent "$http_referer" "$http_user_agent" ';

    ##
    # Gzip Settings
    ##

    gzip on;
    gzip_disable "msie6";

    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 6;
    # gzip_buffers 16 8k;
    # gzip_http_version 1.1;
    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;


    ##
    # Lua Settings
    ##

    lua_shared_dict my_locks 100k;
    lua_package_path "lua/?.lua;../lua-resty-core/lib/?.lua;;";
    init_by_lua '
    ';

    ssl_certificate     ./nginx.crt;
    ssl_certificate_key ./nginx.key;
    ssl_certificate_by_lua_block {
        local ssl = require "ngx.ssl"
        local resty_lock = require "resty.lock"

        function cert_disk_locations(common_name)
            local disk_cache_dir = "/data/funes/cert_cache";
            local private_key_der = string.format("%s/%s_privatekey.pem", disk_cache_dir, common_name)
            local cert_der = string.format("%s/%s_cert.pem", disk_cache_dir, common_name)
            return private_key_der, cert_der
        end

        function get_cert_from_disk(common_name)
            local key_data = nil;
            local cert_data = nil;

            local private_key_der, cert_der = cert_disk_locations(common_name)

            -- fetch the private key from disk
            local f = io.open(private_key_der, "r")
            if f then
                key_data = f:read("*a")
                f:close()
            else
                ngx.log(ngx.WARN, "Failed to read private key data from disk")
            end

            -- fetch the cert data from disk
            local f = io.open(cert_der, "r")
            if f then
                cert_data = f:read("*a")
                f:close()
            else
                ngx.log(ngx.WARN, "Failed to read cert data from disk")
            end

            -- return key_data, cert_data
            if key_data and cert_data then
                local key_data_der, err = ssl.priv_key_pem_to_der(key_data)
                if not key_data_der then
                    ngx.log(ngx.ERR, "failed to convert private key ",
                            "from PEM to DER: ", err)
                    return ngx.exit(ngx.ERROR)
                end

                local cert_data_der, err = ssl.cert_pem_to_der(cert_data)
                if not cert_data_der then
                    ngx.log(ngx.ERR, "failed to convert certificate chain ",
                            "from PEM to DER: ", err)
                    return ngx.exit(ngx.ERROR)
                end

                return key_data_der, cert_data_der
            end

            return nil, nil
        end

        function generate_self_signed_cert(common_name)
            local private_key_der, cert_der = cert_disk_locations(common_name)
            local openssl_command = string.format("openssl req -x509 -outform PEM -nodes -days 365 -newkey rsa:2048 -keyout %s -out %s -subj \"/C=US/ST=California/L=San Francisco/O=Funes/CN=%s\"", private_key_der, cert_der, common_name)
            -- ngx.log(ngx.ERR, openssl_command)
            local ret = os.execute(openssl_command)
            return ret
        end

        function set_cert(common_name)
            local key_data, cert_data = get_cert_from_disk(common_name)
            if key_data and cert_data then
                local ok, err = ssl.set_der_priv_key(key_data)
                if not ok then
                    ngx.log(ngx.ERR, "failed to set DER priv key: ", err)
                    return ngx.exit(ngx.ERROR)
                end
                local ok, err = ssl.set_der_cert(cert_data)
                if not ok then
                    ngx.log(ngx.ERR, "failed to set DER cert: ", err)
                    return ngx.exit(ngx.ERROR)
                end
                return true
            end
            return false
        end

        ssl.clear_certs()

        local common_name = ssl.server_name()
        if common_name == nil then
            common_name = "unknown"
        end

        local ok = set_cert(common_name)
        if ok then
            return
        end

        -- Create a new certificate --

        -- prevent creating same certificate twice using lock
        local lock = resty_lock:new("my_locks")
        local elapsed, err = lock:lock(common_name)
        if not elapsed then
            ngx.log(ngx.ERR, "failed to acquire the lock: ", err)
            return ngx.exit(ngx.ERROR)
        end

        -- generate new private key
        ngx.log(ngx.INFO, "generating key")

        -- call openssl to create a new self-signed certificate in the disk cache.
        local ret = generate_self_signed_cert(common_name)

        -- unlock to avoid deadlocking
        local ok, err = lock:unlock()
        if not ok then
            ngx.log(ngx.ERR, "failed to unlock: ", err)
            return ngx.exit(ngx.ERROR)
        end

        -- check whether openssl call succeeded.
        if not ret == 0 then
            ngx.log(ngx.ERR, string.format("failed to generate certificate: %d", ret))
            return ngx.exit(ngx.ERROR)
        end


        -- read the newly generated cert from disk and return.
        local ok = set_cert(common_name)
        if ok then
            return
        end

        ngx.log(ngx.ERR, "failed to read generated certificate")
        return ngx.exit(ngx.ERROR)
    }

    lua_need_request_body on;

    ##
    # Server Configuration
    ##

    include ./nginx.conf.server;
}
